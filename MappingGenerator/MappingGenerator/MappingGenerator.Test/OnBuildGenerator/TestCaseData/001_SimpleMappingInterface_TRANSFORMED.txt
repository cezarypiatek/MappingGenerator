// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using System.Collections.ObjectModel;
using MappingGenerator.OnBuildGenerator;
using System.Linq;
using MappingGenerator.Test.MappingGenerator.TestCaseData;
using System.Collections.Immutable;

namespace MappingGenerator.Test.MappingGenerator.TestCaseData
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MappingGenerator.OnBuildGenerator.OnBuildMappingGenerator", "2.0.0.0")]
    public partial class SampleMapper : TestCaseData.ISampleMapper
    {
        public virtual UserDTO Map(UserEntity entity)
        {
            return new TestCaseData.UserDTO()
            {
                Age = entity.Age,
                Debs = entity.Debs.ConvertAll(entityDeb => new TestCaseData.AccountDTO()
                {
                    BankName = entityDeb.BankName,
                    Number = entityDeb.Number
                }),
                Source = new TestCaseData.UserSourceDTO(providerName: entity.Source.ProviderName, providerAddress: entity.Source.ProviderAddress)
                {
                    IsActive = entity.Source.IsActive
                },
                ImageData = entity.ImageData,
                LuckyNumbers = entity.LuckyNumbers,
                Total = entity.GetTotal(),
                MainAddress = new TestCaseData.AddressDTO()
                {
                    City = entity.MainAddress.City,
                    ZipCode = entity.MainAddress.ZipCode,
                    Street = entity.MainAddress.Street,
                    FlatNo = entity.MainAddress.FlatNo,
                    BuildingNo = entity.MainAddress.BuildingNo
                },
                Addresses = entity.Addresses.ConvertAll(entityAddress => new TestCaseData.AddressDTO()
                {
                    City = entityAddress.City,
                    ZipCode = entityAddress.ZipCode,
                    Street = entityAddress.Street,
                    FlatNo = entityAddress.FlatNo,
                    BuildingNo = entityAddress.BuildingNo
                }).AsReadOnly(),
                UnitId = entity.Unit.Id,
                ExtraSavings = entity.ExtraSavings.Value,
                Savings = entity.Savings,
                Birthday = entity.Birthday,
                Authentication = entity.Authentication,
                SecondAuthentication = entity.SecondAuthentication.ToString(),
                ThirdAuthentication = (AuthenticationKind)Enum.Parse(typeof(AuthenticationKind), entity.ThirdAuthentication, true),
                FourthAuthentication = (int?)entity.FourthAuthentication,
                FifthAuthentication = (TestCaseData.AuthenticationKind?)entity.FifthAuthentication
            };
        }
    }
}
