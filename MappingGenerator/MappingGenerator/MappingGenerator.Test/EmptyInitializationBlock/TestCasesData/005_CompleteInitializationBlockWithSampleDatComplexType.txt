using System.Collections.Generic;
using System.Collections;
using System.Collections.ObjectModel;
using System;

namespace TestAutoMapper
{
    class DefaultObject
    {
        public string MyProperty { get; set; }

        public int MyProperty1 { get; set; }

        public float MyProperty2 { get; set; }

        public bool MyProperty3 { get; set; }

        public sbyte MyProperty4 { get; set; }

        public byte MyProperty5 { get; set; }

        public char MyProperty6 { get; set; }

        public CustomEnum MyProperty7 { get; set; }

        public decimal DecimalProperty { get; set; }

        public InnerDefaultObject Inner { get; set; }

        public IList<InnerDefaultObject> GenericInners { get; set; }

        public ReadOnlyCollection<InnerDefaultObject> InnersReadonly { get; set; }

        public IList NonGenericInners { get; set; }

        public DateTime OccuredOn { get; set; }
    }
    
    class InnerDefaultObject
    {
        public string MyProperty { get; set; }

        public int MyProperty1 { get; set; }

        public int[] Numbers { get; set; }

        public IOtherObject FieldWithInterface { get; set; }

        public YetAnotherObject PropertyWithConstructor { get; set; }
    }

    interface IOtherObject
    {
        string Field1 { get; set; }
    }

    class OtherObject : IOtherObject
    {
        public string Field1 { get; set; }
        public string Field2 { get; set; }
    }

    class YetAnotherObject
    {
        public YetAnotherObject(string name, OtherObject other)
        {
            this.Name = name;
            this.Other = other;

        }

        public string Name { get;  }
        public OtherObject Other { get; }
    }

    public enum CustomEnum
    {
        Opt1=1,
        Opt2
    }

    static class Factory
    {
        public static DefaultObject New()
        {
            return new DefaultObject
            [|{
            }|];
        }
    }
}