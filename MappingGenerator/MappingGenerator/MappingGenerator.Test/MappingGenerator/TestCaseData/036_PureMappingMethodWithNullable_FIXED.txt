#nullable enable
using System;
using System.Collections.Generic;
using System.Text;
using System.Collections.ObjectModel;
using System.Collections.Immutable;
using System.Linq;

namespace MappingGenerator.Test.MappingGenerator.TestCaseData
{
    public class TestMapper
    {
        public static UserDTO Map(UserEntity? entity)
        {
            return entity != null ? new UserDTO
            {
                Id = entity.Id,
                FirstName = entity.FirstName,
                MiddleName = entity.MiddleName,
                LastName = entity.LastName,
                Age = entity.Age,
                Account = entity.Account != null ? new AccountDTO
                {
                    BankName = entity.Account.BankName,
                    Number = entity.Account.Number
                } : null,
                Account2 = entity.Account2 != null ? new AccountDTO
                {
                    BankName = entity.Account2.BankName,
                    Number = entity.Account2.Number
                } : throw new ArgumentNullException(nameof(entity), "The value of 'entity.Account2' should not be null"),
                Debs = entity.Debs?.ConvertAll(entityDeb => new AccountDTO
                {
                    BankName = entityDeb.BankName,
                    Number = entityDeb.Number
                }),
                Debs2 = entity.Debs2?.ConvertAll(entityDebs2 => new AccountDTO
                {
                    BankName = entityDebs2.BankName,
                    Number = entityDebs2.Number
                }) ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Debs2' should not be null"),
                AddressCity = entity.Address?.City ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Address?.City' should not be null"),
                AddressZipCode = entity.Address?.ZipCode ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Address?.ZipCode' should not be null"),
                AddressStreet = entity.Address?.Street ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Address?.Street' should not be null"),
                AddressFlatNo = entity.Address?.FlatNo,
                AddressBuildingNo = entity.Address?.BuildingNo ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Address?.BuildingNo' should not be null"),
                Address1 = entity.Address1 != null ? new AddressDTO(entity.Address1) : throw new ArgumentNullException(nameof(entity), "The value of 'entity.Address1' should not be null"),
                Address2 = entity.Address2 != null ? new AddressDTO(entity.Address2) : null,
                Address3 = entity.Address3.OfType<AddressEntity>().Select(entityAddress3 => new AddressDTO(entityAddress3)).ToList(),
                Address4 = entity.Address4.ConvertAll(entityAddress4 => entityAddress4 != null ? new AddressDTO(entityAddress4) : null),
                Address5 = entity.Address5?.ConvertAll(entityAddress5 => entityAddress5 != null ? new AddressDTO(entityAddress5) : null) ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Address5' should not be null"),
                Address6 = entity.Address6?.OfType<AddressEntity>().Select(entityAddress6 => new AddressDTO(entityAddress6)).ToList() ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Address6' should not be null"),
                Total = entity.GetTotal() ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.GetTotal()' should not be null"),
                UnitId = entity.Unit?.Id ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Unit?.Id' should not be null"),
                Source = new UserSourceDTO(providerName: entity.Source.ProviderName, providerAddress: entity.Source.ProviderAddress ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Source.ProviderAddress' should not be null"), isActive: entity.Source.IsActive ?? throw new ArgumentNullException(nameof(entity), "The value of 'entity.Source.IsActive' should not be null")),
                Category = entity.Category != null ? MapCategory(entity.Category) ?? throw new NullReferenceException("The value of 'MapCategory(entity.Category)' should not be null") : throw new ArgumentNullException(nameof(entity), "The value of 'entity.Category' should not be null")
            } : throw new ArgumentNullException(nameof(entity), "The value of 'entity' should not be null");
        }

        private static CategoryDTO? MapCategory(CategoryEntity category)
        {
            throw new NotImplementedException();
        }
    }

    public class UserDTO
    {
        public int Id {get; set;}
        public string FirstName { get; set; }
        public string? MiddleName { get; set; }
        public string LastName { get; set; }
        public int Age { get; set; }
        public AccountDTO? Account { get; set; }
        public AccountDTO Account2 { get; set; }
        public List<AccountDTO>? Debs { get; set; }
        public List<AccountDTO> Debs2 { get; set; }
        public string AddressCity { get; set; }
        public string AddressZipCode { get; set; }
        public string AddressStreet { get; set; }
        public string? AddressFlatNo { get; set; }
        public string AddressBuildingNo { get; set; }
        public AddressDTO Address1 { get; set; }
        public AddressDTO? Address2 { get; set; }
        public List<AddressDTO> Address3 { get; set; }
        public List<AddressDTO?> Address4 { get; set; }
        public List<AddressDTO?> Address5 { get; set; }
        public List<AddressDTO> Address6 { get; set; }
        public int Total { get; set; }
        public int UnitId { get; set; }
        public UserSourceDTO Source { get; set; }
        public CategoryDTO Category{ get; set; }
    }

    public class AccountDTO
    {
        public string BankName { get; set; }
        public string Number { get; set; }
    }

    public class AddressDTO
    {
        public string City { get; set; }
        public string ZipCode { get; set; }
        public string Street { get; set; }
        public string FlatNo { get; set; }
        public string BuildingNo { get; set; }

        public AddressDTO(AddressEntity entity)
        {
        }
    }

    public class UserSourceDTO
    {
        public string ProviderName { get; set; }
        public string ProviderAddress { get; set; }
        public bool IsActive {get; set;}

        public UserSourceDTO(string providerName, string providerAddress, bool isActive)
        {
            ProviderName = providerName;
            ProviderAddress = providerAddress;
            IsActive = isActive;
        }
    }

    public class CategoryDTO
    {
    }

    //---- Entities

    public class UserEntity
    {
        public int Id {get; set;}
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string? MiddleName { get; set; }
        public int Age { get; set; }
        public AccountEntity? Account { get; set; }
        public AccountEntity? Account2 { get; set; }
        public List<AccountEntity>? Debs { get; set; }
        public List<AccountEntity>? Debs2 { get; set; }
        public AddressEntity? Address { get; set; }
        public AddressEntity? Address1 { get; set; }
        public AddressEntity? Address2 { get; set; }
        public List<AddressEntity?> Address3 { get; set; }
        public List<AddressEntity?> Address4 { get; set; }
        public List<AddressEntity?>? Address5 { get; set; }
        public List<AddressEntity?>? Address6 { get; set; }
        public int? GetTotal() => throw new Exception();
        public UnitEntity? Unit { get; set; }
        public UserSourceEntity Source { get; set; }
        public CategoryEntity? Category{ get; set; }
    }

    public class AccountEntity
    {
        public string BankName { get; set; }
        public string Number { get; set; }
    }

    public class AddressEntity
    {
        public string City { get; set; }
        public string ZipCode { get; set; }
        public string Street { get; set; }
        public string FlatNo { get; set; }
        public string BuildingNo { get; set; }
    }

    public class UnitEntity
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class UserSourceEntity
    {
        public string ProviderName { get; set; }
        public string? ProviderAddress { get; set; }
        public bool? IsActive {get; set;}
    }

    public class CategoryEntity
    {
    }
}